# The Social Network: Revenge of the Millenial

You were just doing your everyday job, as a system administrator for one of the
most popular social networks, until one day: you find your office access card
revoked and the guards won't let you in anymore. It turns out you were just
fired for no reason at all! Your account / email / IP address was even banned
from accessing the company's social network website!

But don't you worry! You are one of the most skilled hackers out there... you
gotta stick it to the man!

You search through the trash and, fortunately, find the private key of an old
SSH account.

You start sketching a revenge plan...

0. log into the system and explore it; you ask yourself: what was the internal
   address of the web server? when you find it, just start a tunnel and access
   it using your browser;
1. open the social network... guess who's back again (you and Donald, ofc)!
2. but your account was banned... you remember you had a network bot used for
   website maintenance running on another server, maybe you can hijack it and
   extract its credentials?;
3. the maintenance bot has none of the required permissions (you need someone
   with a blue checkbox), but it can be used for phishing! try to target
   a senior on the development team!
4. don't forget about the DBA! using the newly hacked developer account, ask him
   if he can do some SQL queries for you (tell him you need to do some advanced
   reporting, he won't understand them anyway); see if you can further escalate
   your privileges ;)
5. after you finally get hold of the CEO's account, it's time to finish your
   revenge plan: find a way to delete the web server's root (`/var/www`)!


----------------

For each of the subtasks above (1-5, excl. 0), you will find a specific flag
which you will need to persist as proof of your deeds (so... total = 5 flags).

Also beware: the network container is reset everytime you disconnect, so it's
mandatory to save your progress / intermmediate credentials locally (don't
worry, any credentials / flags found will remain the same).

DISCLAIMER: ALL NAMES, CHARACTERS, AND INCIDENTS PORTRAYED IN THIS ROLE-PLAYING
LIKE GAME ARE 100% FICTITIOUS. ANY RESEMBLANCE TO REAL PERSONS, LIVING OR DEAD,
IS PURELY COINCIDENTAL!


Access instructions:
====================

You will use SSH Tunnel Forwarding to access the website (after finding its
address and running the tunneling script from your shell container, ofc) by
going to http://localhost:8080 from your browser.

Initial connection scripts are provided (bash and powershell), though they might
need minor tweaks. Here's how the infrastructure works:

The server spawns individual Docker containers (including database) for each SSH
user session and allocates a random port to use for forwarding the HTTP
protocol, so we will use the OpenSSH client connection multiplexing feature to
keep the session open throughout this process:

- the SSH client will establish a persistent connection to the task server; the
  server will allocate dedicated resources to your client (i.e., random
  container port);
- script will ask the server to return your random web port number;
- after that, it will configure SSH to forward the port previously discovered as
  ':8080' on your machine;
- finally, the script will start the shell container; from now on, keep the
  terminal up and you will be able to access the website using a browser on your
  local machine (after reaching that task);
- if you close the connection, the server will clean up all resources
  allocated for you (so WARNING: everything you posted / modified on any container
  is lost, you will need to repeat some steps again, so make sure to record
  them e.g. in a readme; the flags / credentials / other variables are static
  and do not change between your personalized instances); there is also a 30m
  time limit for each connection!

**Note for Windows users**: OpenSSH for Windows doesn't support control master
/ session multiplexing. Try to use WSL (Windows Subsystem for Linux) if
possible. Otherwise, install Putty and Plink (command line client, bundled if
you use the Putty installer) and use the provided Powershell script
(`connect-putty.ps1`, read the script's code).
With Putty, don't forget to convert the private SSH key to PPK format (it
doesn't speak PEM). Ofc, Google it!

For modern, POSIX-compatible OSes (and WSL), the bash script should work out of
the box.
For WSL2, you might need to use the Linux virtual machine's IP address instead
of 'localhost'.

Infrastructure Errata:
 - Docker changes the network IP prefix (e.g., '192.168.X.0') every time you
   reconnect to ssh; but don't worry, the last addres byte of the web server
   remains the same and the tunneling script automatically replaces the IP
   prefix, so you can keep using your previously discovered address!


Notes / hints:
==============

0. you have several network utilities installed, check them out ;)
   BTW, no flag here (you'll find it in the next subtask).
1. start a tunnel and connect to the discovered server (HTTP, ofc);
   the flag is hidden somewhere...
2. use your shell, see hint for #0; still don't get it? TCP LISTEN more carefully ;)
   (note: wait for at least 3 minutes to make sure you capture some requests);
   after logging in with maintenance user, the flag is in there, this time a bit
   more concealed :P
3. note that you can only send messages to your direct friends... see if you can
   trick the lead developer into providing you his login credentials with one
   simple trick (you'll actually have to work with some valid HTML and JS to
   build a functional phishing form, since the XSS is simulated quite
   realistically);
4. the DBA guy is not very responsive, so he had a BOT answering machine built for
   his query requests... see if you can find the CEO account's password... but
   it's probably encrypted (database security 101), so find a way to change it ;)
5. another disgruntled employee will probably see what you're after and will try
   to assist you for this last, most difficult task (check the console)...
   although he's going to speak to you in riddles in order to avoid the system's
   A.I. from learning of your plans!

Remember: 5 flags x 0.2p each (totalling 100% of the assignment score)!

